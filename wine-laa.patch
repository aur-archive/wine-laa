diff -urB wine/dlls/kernel32/heap.c wine/dlls/kernel32/heap.c
--- wine/dlls/kernel32/heap.c	2011-12-16 19:15:33.000000000 +0000
+++ wine/dlls/kernel32/heap.c	2011-12-19 17:08:41.686061500 +0000
@@ -1351,6 +1351,7 @@
 
     /* values are limited to 2Gb unless the app has the IMAGE_FILE_LARGE_ADDRESS_AWARE flag */
     /* page file sizes are not limited (Adobe Illustrator 8 depends on this) */
+    /*
     if (!(nt->FileHeader.Characteristics & IMAGE_FILE_LARGE_ADDRESS_AWARE))
     {
         if (lpBuffer->dwTotalPhys > MAXLONG) lpBuffer->dwTotalPhys = MAXLONG;
@@ -1358,6 +1359,7 @@
         if (lpBuffer->dwTotalVirtual > MAXLONG) lpBuffer->dwTotalVirtual = MAXLONG;
         if (lpBuffer->dwAvailVirtual > MAXLONG) lpBuffer->dwAvailVirtual = MAXLONG;
     }
+    */
 
     /* work around for broken photoshop 4 installer */
     if ( lpBuffer->dwAvailPhys +  lpBuffer->dwAvailPageFile >= 2U*1024*1024*1024)
diff -urB wine/dlls/ntdll/loader.c wine/dlls/ntdll/loader.c
--- wine/dlls/ntdll/loader.c	2011-12-16 19:15:33.000000000 +0000
+++ wine/dlls/ntdll/loader.c	2011-12-19 17:04:12.512726601 +0000
@@ -2663,7 +2663,8 @@
     status = wine_call_on_stack( attach_process_wine/dlls, wm, NtCurrentTeb()->Tib.StackBase );
     if (status != STATUS_SUCCESS) goto error;
 
-    virtual_release_address_space( nt->FileHeader.Characteristics & IMAGE_FILE_LARGE_ADDRESS_AWARE );
+    //virtual_release_address_space( nt->FileHeader.Characteristics & IMAGE_FILE_LARGE_ADDRESS_AWARE );
+    virtual_release_address_space( IMAGE_FILE_LARGE_ADDRESS_AWARE );
     virtual_clear_thread_stack();
     wine_switch_to_stack( start_process, kernel_start, NtCurrentTeb()->Tib.StackBase );

diff -urB wine/dlls/wined3d/directx.c wine/dlls/wined3d/directx.c
--- wine/dlls/wined3d/directx.c	
+++ wine/dlls/wined3d/directx.c	
@@ -4673,8 +4673,13 @@ HRESULT CDECL wined3d_get_device_caps(const struct wined3d *wined3d, UINT adapte
     caps->MaxUserClipPlanes = gl_info->limits.clipplanes;
     caps->MaxActiveLights = gl_info->limits.lights;
 
-    caps->MaxVertexBlendMatrices = gl_info->limits.blends;
-    caps->MaxVertexBlendMatrixIndex   = 0;
+    if (gl_info->supported[ARB_VERTEX_BLEND]) {
+        caps->MaxVertexBlendMatrices    = gl_info->limits.blends;
+        caps->MaxVertexBlendMatrixIndex = 0;
+    } else {
+        caps->MaxVertexBlendMatrices    = 4;
+        caps->MaxVertexBlendMatrixIndex = 255;
+    }
 
     caps->MaxAnisotropy = gl_info->limits.anisotropy;
     caps->MaxPointSize = gl_info->limits.pointsize_max;
diff -urB wine/dlls/wined3d/drawprim.c wine/dlls/wined3d/drawprim.c
--- wine/dlls/wined3d/drawprim.c	
+++ wine/dlls/wined3d/drawprim.c	
@@ -60,6 +60,75 @@ static void drawStridedFast(const struct wined3d_gl_info *gl_info, GLenum primit
 }
 
 /*
+ * Emit a vertex using swoftware vertex blending
+ */
+static void emitBlendedVertex(struct wined3d_stateblock *stateBlock,
+                              const float *weights, int nweights, const BYTE *indices,
+                              const float *pos, const float *norm)
+{
+    const float *m;
+    float        vec[4];
+    float        mat[4*4];
+    float        last = 1.f;
+    int          i, j;
+
+    /* compute the weighted sum of the matrices */
+    m = &stateBlock->state.transforms[WINED3D_TS_WORLD_MATRIX((indices ? indices[0] : 0))].u.m[0][0];
+    for (j = 0; j < 16; j++)
+        mat[j] = m[j] * weights[0];
+    last -= weights[0];
+
+    for (i = 1; i < nweights; i++) {
+        if (weights[i]) {
+            m = &stateBlock->state.transforms[WINED3D_TS_WORLD_MATRIX((indices ? indices[i] : i))].u.m[0][0];
+            for (j = 0; j < 16; j++)
+                mat[j] += m[j] * weights[i];
+            last -= weights[i];
+        }
+    }
+
+    /* do the last */
+    if (last) {
+        m = &stateBlock->state.transforms[WINED3D_TS_WORLD_MATRIX((indices ? indices[i] : i))].u.m[0][0];
+        for (j = 0; j < 16; j++)
+            mat[j] += m[j] * last;
+    }
+
+    if (norm) {
+        /* compute the resulting normal */
+        vec[0] = norm[0] * mat[0] + norm[1] * mat[4] + norm[2] * mat[8];
+        vec[1] = norm[0] * mat[1] + norm[1] * mat[5] + norm[2] * mat[9];
+        vec[2] = norm[0] * mat[2] + norm[1] * mat[6] + norm[2] * mat[10];
+        /* normalize */
+        vec[3] = vec[0]*vec[0] + vec[1]*vec[1] + vec[2]*vec[2];
+        if (vec[3]) {
+            vec[3] = 1.f / sqrtf(vec[3]);
+            vec[0] *= vec[3];
+            vec[1] *= vec[3];
+            vec[2] *= vec[3];
+        }
+
+        glNormal3fv(vec);
+    }
+
+    if (pos) {
+        /* compute the resulting position */
+        vec[0] = pos[0] * mat[0] + pos[1] * mat[4] + pos[2] * mat[8] + mat[12];
+        vec[1] = pos[0] * mat[1] + pos[1] * mat[5] + pos[2] * mat[9] + mat[13];
+        vec[2] = pos[0] * mat[2] + pos[1] * mat[6] + pos[2] * mat[10] + mat[14];
+        vec[3] = pos[0] * mat[3] + pos[1] * mat[7] + pos[2] * mat[11] + mat[15];
+        /* normalize */
+        if (vec[3]) {
+            vec[0] /= vec[3];
+            vec[1] /= vec[3];
+            vec[2] /= vec[3];
+        }
+
+        glVertex3fv(vec);
+    }
+}
+
+/*
  * Actually draw using the supplied information.
  * Slower GL version which extracts info about each vertex in turn
  */
@@ -78,7 +147,8 @@ static void drawStridedSlow(const struct wined3d_device *device, const struct wi
     BOOL pixelShader = use_ps(state);
     BOOL specular_fog = FALSE;
     const BYTE *texCoords[WINED3DDP_MAXTEXCOORD];
-    const BYTE *diffuse = NULL, *specular = NULL, *normal = NULL, *position = NULL;
+    const BYTE *diffuse = NULL, *specular = NULL, *normal = NULL, *position = NULL, *weights = NULL, *indices = NULL;
+    int nweights = 0;
     const struct wined3d_gl_info *gl_info = context->gl_info;
     UINT texture_stages = gl_info->limits.texture_stages;
     const struct wined3d_stream_info_element *element;
@@ -171,6 +241,31 @@ static void drawStridedSlow(const struct wined3d_device *device, const struct wi
         GL_EXTCALL(glSecondaryColor3fEXT)(0, 0, 0);
     }
 
+    if (device->vertexBlendSW) {
+        if (!si->elements[WINED3D_FFP_BLENDWEIGHT].data.addr) {
+            WARN("vertex blending enabled but blendWeights.data=NULL\n");
+        } else if (si->elements[WINED3D_FFP_BLENDWEIGHT].format->gl_vtx_type != GL_FLOAT) {
+            FIXME("unsupported blend weights datatype (%d)\n", si->elements[WINED3D_FFP_BLENDWEIGHT].format->id);
+        } else if (position && si->elements[WINED3D_FFP_POSITION].format->emit_idx != WINED3D_FFP_EMIT_FLOAT3) {
+            FIXME("unsupported postion datatype (%d)\n", si->elements[WINED3D_FFP_POSITION].format->id);
+        } else if (normal && si->elements[WINED3D_FFP_NORMAL].format->emit_idx != WINED3D_FFP_EMIT_FLOAT3) {
+            FIXME("unsupported normal datatype (%d)\n", si->elements[WINED3D_FFP_NORMAL].format->id);
+        } else {
+            element = &si->elements[WINED3D_FFP_BLENDWEIGHT];
+            weights = element->data.addr;
+            nweights = element->format->gl_vtx_format;
+        }
+
+        if (si->elements[WINED3D_FFP_BLENDINDICES].data.addr) {
+            if (si->elements[WINED3D_FFP_BLENDINDICES].format->emit_idx != WINED3D_FFP_EMIT_UBYTE4) {
+                FIXME("unsupported blend indices datatype (%d)\n", si->elements[WINED3D_FFP_BLENDINDICES].format->id);
+            } else {
+                element = &si->elements[WINED3D_FFP_BLENDINDICES];
+                indices = element->data.addr;
+            }
+        }
+    }
+
     for (textureNo = 0; textureNo < texture_stages; ++textureNo)
     {
         int coordIdx = state->texture_states[textureNo][WINED3DTSS_TEXCOORDINDEX];
@@ -287,17 +382,25 @@ static void drawStridedSlow(const struct wined3d_device *device, const struct wi
             }
         }
 
-        /* Normal -------------------------------- */
+        if (weights) {
+            emitBlendedVertex(device->stateBlock,
+                              (const float*)(weights + SkipnStrides * si->elements[WINED3D_FFP_BLENDWEIGHT].stride), nweights,
+                              indices ? (indices + SkipnStrides * si->elements[WINED3D_FFP_BLENDINDICES].stride) : NULL,
+                              (const float*)(position ? (position + SkipnStrides * si->elements[WINED3D_FFP_POSITION].stride) : NULL),
+                              (const float*)(normal ? (normal + SkipnStrides * si->elements[WINED3D_FFP_NORMAL].stride) : NULL));
+        } else {
+            /* Normal -------------------------------- */
         if (normal)
         {
-            const void *ptrToCoords = normal + SkipnStrides * si->elements[WINED3D_FFP_NORMAL].stride;
+                const void *ptrToCoords = normal + SkipnStrides * si->elements[WINED3D_FFP_NORMAL].stride;
             normal_funcs[si->elements[WINED3D_FFP_NORMAL].format->emit_idx](ptrToCoords);
-        }
+            }
 
-        /* Position -------------------------------- */
-        if (position) {
-            const void *ptrToCoords = position + SkipnStrides * si->elements[WINED3D_FFP_POSITION].stride;
+            /* Position -------------------------------- */
+            if (position) {
+                const void *ptrToCoords = position + SkipnStrides * si->elements[WINED3D_FFP_POSITION].stride;
             position_funcs[si->elements[WINED3D_FFP_POSITION].format->emit_idx](ptrToCoords);
+            }
         }
 
         /* For non indexed mode, step onto next parts */
@@ -696,6 +799,17 @@ void drawPrimitive(struct wined3d_device *device, UINT index_count, UINT StartId
                 }
                 emulation = TRUE;
             }
+            else if (device->vertexBlendSW)
+            {
+                static BOOL warned;
+                if (!warned) {
+                    FIXME("Using software emulation because vertex blending is enabled\n");
+                    warned = TRUE;
+                } else {
+                    TRACE("Using software emulation because vertex blending is enabled\n");
+                }
+                emulation = TRUE;
+            }
 
             if(emulation) {
                 stream_info = &stridedlcl;
diff -urB wine/dlls/wined3d/state.c wine/dlls/wined3d/state.c
--- wine/dlls/wined3d/state.c	
+++ wine/dlls/wined3d/state.c	
@@ -3662,7 +3662,7 @@ static void transform_world(struct wined3d_context *context, const struct wined3
         glLoadIdentity();
         checkGLcall("glLoadIdentity()");
     }
-    else
+    else if (!context->swapchain->device->vertexBlendSW)
     {
         /* In the general case, the view matrix is the identity matrix */
         if (context->swapchain->device->view_ident)
@@ -3677,6 +3677,9 @@ static void transform_world(struct wined3d_context *context, const struct wined3
             glMultMatrixf(&state->transforms[WINED3D_TS_WORLD_MATRIX(0)].u.m[0][0]);
             checkGLcall("glMultMatrixf");
         }
+    } else {
+        glLoadMatrixf(&state->transforms[WINED3D_TS_VIEW].u.m[0][0]);
+        checkGLcall("glLoadMatrixf");
     }
 }
 
@@ -3812,11 +3812,30 @@ static void state_vertexblend_w(struct wined3d_context *context, const struct wi
     enum wined3d_vertex_blend_flags f = state->render_states[WINED3D_RS_VERTEXBLEND];
     static unsigned int once;
 
-    if (f == WINED3D_VBF_DISABLE)
-        return;
-
-    if (!once++) FIXME("Vertex blend flags %#x not supported.\n", f);
-    else WARN("Vertex blend flags %#x not supported.\n", f);
+    switch (f) {
+        case WINED3D_VBF_0WEIGHTS:
+        case WINED3D_VBF_1WEIGHTS:
+        case WINED3D_VBF_2WEIGHTS:
+        case WINED3D_VBF_3WEIGHTS:
+            if(!once) {
+                once = TRUE;
+                FIXME("Vertex blending enabled, but not supported by hardware. Using software emulation.\n");
+            }
+            if (!context->swapchain->device->vertexBlendSW) {
+                context->swapchain->device->vertexBlendSW = TRUE;
+                transform_world(context, state, state_id);
+            }
+            break;
+        case WINED3D_VBF_TWEENING:
+            WARN("Vertex blend flags %#x not supported.\n", f);
+            /* fall through */
+        default:
+            if (context->swapchain->device->vertexBlendSW) {
+                context->swapchain->device->vertexBlendSW = FALSE;
+                transform_world(context, state, state_id);
+            }
+            break;
+    }
 }
 
 static void state_vertexblend(struct wined3d_context *context, const struct wined3d_state *state, DWORD state_id)
diff -urB wine/dlls/wined3d/vertexdeclaration.c wine/dlls/wined3d/vertexdeclaration.c
--- wine/dlls/wined3d/vertexdeclaration.c	
+++ wine/dlls/wined3d/vertexdeclaration.c	
@@ -107,6 +107,15 @@ static BOOL declaration_element_valid_ffp(const WINED3DVERTEXELEMENT *element)
                     return FALSE;
             }
 
+        case WINED3D_DECL_USAGE_BLEND_INDICES:
+            switch(element->format)
+            {
+                case WINED3DFMT_R8G8B8A8_UINT:
+                    return TRUE;
+                default:
+                    return FALSE;
+            }
+
         case WINED3D_DECL_USAGE_NORMAL:
             switch(element->format)
             {
diff -urB wine/dlls/wined3d/wined3d_private.h wine/dlls/wined3d/wined3d_private.h
--- wine/dlls/wined3d/wined3d_private.h	
+++ wine/dlls/wined3d/wined3d_private.h	
@@ -1672,6 +1672,7 @@ struct wined3d_device
 
     WORD view_ident : 1;                /* true iff view matrix is identity */
     WORD vertexBlendUsed : 1;           /* To avoid needless setting of the blend matrices */
+    WORD vertexBlendSW : 1;             /* vertexBlend software fallback used */
     WORD isRecordingState : 1;
     WORD isInDraw : 1;
     WORD bCursorVisible : 1;
